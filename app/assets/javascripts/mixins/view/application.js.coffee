# Public: Mixins for the entire application's views.
Showgap.Mixins.View.Application =
  # --------------------------
  # Zombie View Killer
  # --------------------------
  # Public: Remove zombies by calling remove, then removing event
  # handlers and finally calling onClose if exists so the view can
  # clean up anything that remains.
  #
  # Returns nothing.
  close: ->
    @remove()
    @off()
    if @onClose
      @onClose()

  # --------------------------
  # Error Handler
  # --------------------------

  # Public: Adds error handling capability to a Backbone view. Shows server
  # errors in the @errorContainer, which must be defined by the Backbone view.

  # Internal: Parses the JSON error string into a JavaScript object.
  #
  # Returns the error JavaScript object.
  parseErrorsFromResponse: (response) ->
    parsedJSON = $.parseJSON(response.responseText)
    if 'errors' of parsedJSON
      parsedJSON.errors
    else if 'error' of parsedJSON
      parsedJSON.error
    else
      console.error "Parsed Response ", parsedJSON
      throw "Errors not found in parsed response"

  # Public: Handles errors generated by collection creation
  #
  # Requirements
  #   The view must define:
  #     $errorContainer() - A function that should return a jQuery object that
  #       points to the div where the errors should be placed.
  #
  # model - The model passed by Backbone on collection.create
  # response - The xhr passed by Backbone on collection.create
  #
  # Returns nothing.
  handleError: (model, response) ->
    # If the model is still new, that means it didn't save on the server.  That
    # also means the view for the model showed up on the page. We need to
    # destroy it and then re-render the view.
    if model.isNew()
      model.destroy()
      @render()

    if _.isObject(response) and _.has(response, 'status')
      # We are handling an XHR error.

      modalContents = {}
      switch response.status
        when 0
          Showgap.showModalResponseError(response)
        when 200
          # No errors, do nothing
          null
        when 403
          # Authorization error, show in error container if available.
          # Validation error, add it to the errorContainer
          if @errorContainer
            errors = @parseErrorsFromResponse(response)
            @showErrorsInContainer(errors, @errorContainer())
          else
            console.error "Missing errorContainer for", this
            return

        when 422
          # Validation error, add it to the errorContainer
          unless @errorContainer
            console.error "Missing errorContainer for", this
            return

          errors = @parseErrorsFromResponse(response)
          @showErrorsInContainer(errors, @errorContainer())
        when 500
          Showgap.showModalResponseError(response)
        else
          Showgap.showModalResponseError(response)

    else
      # We are handling a model validation error.

      if Showgap.env == 'development'
        console.error "Error saving #{model} because #{response}"

      @showErrorsInContainer(response, @errorContainer())

  # Public: Displays a Rails-generated JSON validation error in a given
  # container.
  #
  # errors - A Rails error message set parsed from a JSON request.
  # container - A jQuery object referencing a valid container.
  #
  # Returns the jQuery object for the container.
  showErrorsInContainer: (errors, container) ->
    errorTemplate = JST['forms/error']
    errorMessages = []

    unless errors
      throw "Missing errors passed to showErrorsInContainer #{errors}"

    if Object.isArray(errors)
      # Authorization or manually created errors.
      errors.each (error) ->
        errorMessages.push(error)
    else if _.isObject(errors)
      # Rails error object.
      for attribute, messages of errors
        for message in messages
          errorMessages.push("#{attribute.titleize()} #{messages}")
    else
      # Plain text error
      errorMessages.push(errors)

    $('.error-messages', container).remove()
    container.prepend(errorTemplate(errors: errorMessages))

  # Public: Removes the error div from the view.
  #
  # Returns nothing.
  removeAlert: ->
    $('.alert', @errorContainer()).remove()
